name: Deploy Microservices to ECR and ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering

env:
  ECR_REPO: capstone-lms  # Base name for ECR repositories
  AWS_REGION: ${{ secrets.AWS_REGION }}  # AWS region from secrets
  CLUSTER_NAME: LMS-Cluster  # ECS cluster name from CloudFormation template

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - { dir: "Books API", repo: books, service_name: Books-ECSService, container_name: books-container }
          - { dir: "Users API", repo: users, service_name: User-ECSService, container_name: user-container }
          - { dir: "Reservation API", repo: reservation, service_name: Reservation-ECSService, container_name: reservation-container }

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS Account ID
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Set Image Tag
        run: |
          IMAGE_TAG=$(date +%s)  # Use timestamp for unique tag
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and Push Books API
        run: |
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO/books:$IMAGE_TAG "./Books API"
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO/books:$IMAGE_TAG

      - name: Build and Push Users API
        run: |
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO/users:$IMAGE_TAG "./Users API"
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO/users:$IMAGE_TAG

      - name: Build and Push Reservation API
        run: |
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO/reservation:$IMAGE_TAG "./Reservation API"
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO/reservation:$IMAGE_TAG

      # Deploy Reservation to ECS
      - name: Deploy Reservation to ECS
        run: |
          SERVICE_NAME="Reservation-ECSService"
          CONTAINER_NAME="reservation-container"
          TASK_DEF_ARN=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].taskDefinition' --output text)
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --query 'taskDefinition' --output json)
          NEW_IMAGE="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO/reservation:$IMAGE_TAG"
          UPDATED_TASK_DEF=$(echo "$TASK_DEF" | jq --arg IMAGE "$NEW_IMAGE" --arg NAME "$CONTAINER_NAME" '
            {
              "family": .family,
              "taskRoleArn": .taskRoleArn,
              "executionRoleArn": .executionRoleArn,
              "networkMode": .networkMode,
              "containerDefinitions": [.containerDefinitions[] | if .name == $NAME then .image = $IMAGE else . end]
            } + 
            (if .volumes then {"volumes": .volumes} else {} end) +
            (if .placementConstraints then {"placementConstraints": .placementConstraints} else {} end) +
            (if .requiresCompatibilities then {"requiresCompatibilities": .requiresCompatibilities} else {} end) +
            (if .cpu then {"cpu": .cpu} else {} end) +
            (if .memory then {"memory": .memory} else {} end) +
            (if .tags then {"tags": .tags} else {} end) +
            (if .pidMode then {"pidMode": .pidMode} else {} end) +
            (if .ipcMode then {"ipcMode": .ipcMode} else {} end) +
            (if .proxyConfiguration then {"proxyConfiguration": .proxyConfiguration} else {} end) +
            (if .inferenceAccelerators then {"inferenceAccelerators": .inferenceAccelerators} else {} end) +
            (if .ephemeralStorage then {"ephemeralStorage": .ephemeralStorage} else {} end) +
            (if .runtimePlatform then {"runtimePlatform": .runtimePlatform} else {} end) +
            (if .enableFaultInjection then {"enableFaultInjection": .enableFaultInjection} else {} end)')
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$UPDATED_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN

      # Deploy Users to ECS
      - name: Deploy Users to ECS
        run: |
          SERVICE_NAME="User-ECSService"
          CONTAINER_NAME="user-container"
          TASK_DEF_ARN=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].taskDefinition' --output text)
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --query 'taskDefinition' --output json)
          NEW_IMAGE="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO/users:$IMAGE_TAG"
          UPDATED_TASK_DEF=$(echo "$TASK_DEF" | jq --arg IMAGE "$NEW_IMAGE" --arg NAME "$CONTAINER_NAME" '
            {
              "family": .family,
              "taskRoleArn": .taskRoleArn,
              "executionRoleArn": .executionRoleArn,
              "networkMode": .networkMode,
              "containerDefinitions": [.containerDefinitions[] | if .name == $NAME then .image = $IMAGE else . end]
            } + 
            (if .volumes then {"volumes": .volumes} else {} end) +
            (if .placementConstraints then {"placementConstraints": .placementConstraints} else {} end) +
            (if .requiresCompatibilities then {"requiresCompatibilities": .requiresCompatibilities} else {} end) +
            (if .cpu then {"cpu": .cpu} else {} end) +
            (if .memory then {"memory": .memory} else {} end) +
            (if .tags then {"tags": .tags} else {} end) +
            (if .pidMode then {"pidMode": .pidMode} else {} end) +
            (if .ipcMode then {"ipcMode": .ipcMode} else {} end) +
            (if .proxyConfiguration then {"proxyConfiguration": .proxyConfiguration} else {} end) +
            (if .inferenceAccelerators then {"inferenceAccelerators": .inferenceAccelerators} else {} end) +
            (if .ephemeralStorage then {"ephemeralStorage": .ephemeralStorage} else {} end) +
            (if .runtimePlatform then {"runtimePlatform": .runtimePlatform} else {} end) +
            (if .enableFaultInjection then {"enableFaultInjection": .enableFaultInjection} else {} end)')
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$UPDATED_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN

      # Deploy Books to ECS
      - name: Deploy Books to ECS
        run: |
          SERVICE_NAME="Books-ECSService"
          CONTAINER_NAME="books-container"
          TASK_DEF_ARN=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].taskDefinition' --output text)
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --query 'taskDefinition' --output json)
          NEW_IMAGE="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO/books:$IMAGE_TAG"
          UPDATED_TASK_DEF=$(echo "$TASK_DEF" | jq --arg IMAGE "$NEW_IMAGE" --arg NAME "$CONTAINER_NAME" '
            {
              "family": .family,
              "taskRoleArn": .taskRoleArn,
              "executionRoleArn": .executionRoleArn,
              "networkMode": .networkMode,
              "containerDefinitions": [.containerDefinitions[] | if .name == $NAME then .image = $IMAGE else . end]
            } + 
            (if .volumes then {"volumes": .volumes} else {} end) +
            (if .placementConstraints then {"placementConstraints": .placementConstraints} else {} end) +
            (if .requiresCompatibilities then {"requiresCompatibilities": .requiresCompatibilities} else {} end) +
            (if .cpu then {"cpu": .cpu} else {} end) +
            (if .memory then {"memory": .memory} else {} end) +
            (if .tags then {"tags": .tags} else {} end) +
            (if .pidMode then {"pidMode": .pidMode} else {} end) +
            (if .ipcMode then {"ipcMode": .ipcMode} else {} end) +
            (if .proxyConfiguration then {"proxyConfiguration": .proxyConfiguration} else {} end) +
            (if .inferenceAccelerators then {"inferenceAccelerators": .inferenceAccelerators} else {} end) +
            (if .ephemeralStorage then {"ephemeralStorage": .ephemeralStorage} else {} end) +
            (if .runtimePlatform then {"runtimePlatform": .runtimePlatform} else {} end) +
            (if .enableFaultInjection then {"enableFaultInjection": .enableFaultInjection} else {} end)')
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$UPDATED_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN